name: GKE Deploy

on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest
    environment: production

    permissions:
      contents: 'read'
      id-token: 'write'
      deployments: 'write'

    steps:
    - name: Checkout repository
      uses: actions/checkout@v2

    - name: Set up Cloud SDK
      uses: google-github-actions/setup-gcloud@v1
      with:
        version: 'latest'

    - name: Authenticate to GCP
      uses: google-github-actions/auth@v1
      with:
        credentials_json: ${{ secrets.GCP_SA_KEY }}

    - name: Enable GCP Services
      run: gcloud services enable container

    - name: Install gke-gcloud-auth-plugin
      run: |
        sudo apt-get update
        sudo apt-get install apt-transport-https ca-certificates gnupg curl
        curl https://packages.cloud.google.com/apt/doc/apt-key.gpg | sudo gpg --dearmor -o /usr/share/keyrings/cloud.google.gpg
        echo "deb [signed-by=/usr/share/keyrings/cloud.google.gpg] https://packages.cloud.google.com/apt cloud-sdk main" | sudo tee -a /etc/apt/sources.list.d/google-cloud-sdk.list
        sudo apt-get update && sudo apt-get install google-cloud-cli
        sudo apt-get install -y google-cloud-sdk-gke-gcloud-auth-plugin google-cloud-cli-gke-gcloud-auth-plugin

    - name: Check if GKE Cluster Exists
      id: check-cluster
      run: |
        if gcloud container clusters describe cluster-amazon-data --zone europe-west4-a; then
          echo "exists=true" >> $GITHUB_ENV
        else
          echo "exists=false" >> $GITHUB_ENV
        fi

    - name: Create GKE Cluster
      if: env.exists == 'false'
      run: |
        gcloud container clusters create cluster-amazon-data \
          --zone=europe-west4-a \
          --cluster-version=latest \
          --num-nodes=3 \
          --machine-type=e2-medium \
          --enable-autorepair \
          --scopes=service-control,service-management,compute-rw,storage-ro,cloud-platform,logging-write,monitoring-write
        gcloud container clusters get-credentials cluster-amazon-data --zone europe-west4-a

    - name: Get User Account
      id: get-user
      run: |
        USER_ACCOUNT=$(gcloud config get-value core/account)
        if [ -z "$USER_ACCOUNT" ]; then
          SERVICE_ACCOUNT_EMAIL=${{ secrets.GCP_SA_EMAIL }}
          USER_ACCOUNT="$SERVICE_ACCOUNT_EMAIL"
        fi
        echo "USER_ACCOUNT=$USER_ACCOUNT" >> $GITHUB_ENV
        echo "Current authenticated account: $USER_ACCOUNT"

    - name: Get Credentials for Existing Cluster
      if: env.exists == 'true'
      run: gcloud container clusters get-credentials cluster-amazon-data --zone europe-west4-a

    - name: Build and Push Docker Images
      run: |
        export PROJECT_ID=$(gcloud info --format='value(config.project)')
        docker build -t yelp_reviews ./app/microservices/yelp-reviews
        docker tag yelp_reviews gcr.io/cloudcomputinginc/yelp_reviews:latest

        docker build -t market_analysis ./app/microservices/market-analysis
        docker tag market_analysis gcr.io/cloudcomputinginc/market_analysis:latest

        docker build -t question_analysis ./app/microservices/question-analysis
        docker tag question_analysis gcr.io/cloudcomputinginc/question_analysis:latest

        docker build -t api_gateway ./api
        docker tag api_gateway gcr.io/cloudcomputinginc/api_gateway:latest

        docker build -t sentiment_analysis ./app/microservices/sentiment-analysis
        docker tag sentiment_analysis gcr.io/cloudcomputinginc/sentiment_analysis:latest

        gcloud auth configure-docker
        docker push gcr.io/cloudcomputinginc/yelp_reviews:latest
        docker push gcr.io/cloudcomputinginc/market_analysis:latest

        docker push gcr.io/cloudcomputinginc/question_analysis:latest
        docker push gcr.io/cloudcomputinginc/api_gateway:latest

        docker push gcr.io/cloudcomputinginc/sentiment_analysis:latest

    - name: Configure Firewall and Apply Kubernetes Configs
      run: |
        CLUSTER_NAME=$(gcloud container clusters list --format="value(name)" --filter="zone:(europe-west4-a)")
        TAG_NAME=$(gcloud compute instances list --filter="name~'^gke-$CLUSTER_NAME'" --format="value(tags.items[0])" --limit=1)
        NETWORK_NAME=$(gcloud container clusters describe $CLUSTER_NAME --zone europe-west4-a --format="value(network)")
        FIREWALL_RULE_NAME="allow-nodeport-access"

        if ! gcloud compute firewall-rules describe $FIREWALL_RULE_NAME &>/dev/null; then
          gcloud compute firewall-rules create $FIREWALL_RULE_NAME \
            --direction=INGRESS \
            --priority=1000 \
            --network=$NETWORK_NAME \
            --action=ALLOW \
            --rules=tcp:30000 \
            --source-ranges=0.0.0.0/0 \
            --target-tags=$TAG_NAME
        fi

        for file in kubernetes/*/*.yaml; do kubectl apply -f "$file"; done

        PROMETHEUS_DIR=./prometheus
        kubectl apply -f $PROMETHEUS_DIR/prometheus-config.yaml
        kubectl apply -f $PROMETHEUS_DIR/prometheus-deployment.yaml
        kubectl apply -f $PROMETHEUS_DIR/prometheus-service.yaml
        kubectl apply -f $PROMETHEUS_DIR/pushgateway.yaml
        kubectl apply -f $PROMETHEUS_DIR/grafana.yaml
        kubectl apply -f https://github.com/kubernetes-sigs/metrics-server/releases/latest/download/components.yaml

        kubectl rollout status deployment/prometheus-deployment
        kubectl rollout status deployment/pushgateway

        kubectl create configmap locust-scripts --from-file=kubernetes/locust/locust_marketAnalysis.py || kubectl create configmap locust-scripts --from-file=kubernetes/locust/locust_marketAnalysis.py --dry-run=client -o yaml | kubectl apply -f -
        kubectl get configmap locust-scripts

        EXTERNAL_IP=""
        while [ -z "$EXTERNAL_IP" ]; do
          echo "Waiting for external IP of nginx-gateway-svc..."
          EXTERNAL_IP=$(kubectl get svc nginx-gateway-svc -o jsonpath='{.status.loadBalancer.ingress[0].ip}')
          [ -z "$EXTERNAL_IP" ] && sleep 10
        done

        echo "External IP found: $EXTERNAL_IP"
        LOCUST_DEPLOYMENT_YAML=kubernetes/locust/locust-deployment.yaml
        sed -i "s|--host=http://PLACEHOLDER|--host=http://$EXTERNAL_IP|g" $LOCUST_DEPLOYMENT_YAML
        kubectl apply -f $LOCUST_DEPLOYMENT_YAML

    # Create GitHub Deployment
    - name: Create GitHub Deployment
      id: create_deployment
      uses: octokit/request-action@v2.x
      with:
        route: POST /repos/:owner/:repo/deployments
        owner: ${{ github.repository_owner }}
        repo: ${{ github.event.repository.name }}
        ref: ${{ github.sha }}
        environment: production

    # Deploy the Docker image to the GKE cluster and update GitHub Deployment status
    - name: Deploy
      run: |
        timeout 20 kubectl rollout status deployment/yelp-reviews-deployment || echo "Yelp Reviews deployment not found"
        timeout 20 kubectl rollout status deployment/market-analysis-deployment  || echo "Market Analysis deployment not found"
        timeout 20 kubectl rollout status deployment/question-analysis-deployment || echo "Question Analysis deployment not found"
        timeout 20 kubectl rollout status deployment/api-gateway-deployment  || echo "API Gateway deployment not found"
        timeout 20 kubectl rollout status deployment/sentiment-analysis-deployment || echo "Sentiment Analysis deployment not found"
        timeout 20 kubectl rollout status deployment/prometheus-deployment || echo "Prometheus deployment not found"
        timeout 20 kubectl rollout status deployment/locust  || echo "Locust deployment not found"
        EXTERNAL_IP=""
        while [ -z "$EXTERNAL_IP" ]; do
          echo "Waiting for external IP of nginx-gateway-svc..."
          EXTERNAL_IP=$(kubectl get svc nginx-gateway-svc -o jsonpath='{.status.loadBalancer.ingress[0].ip}')
          [ -z "$EXTERNAL_IP" ] && sleep 10
        done

        echo "External IP found: $EXTERNAL_IP"

    # Update deployment status to success
    - name: Update deployment status to success
      if: success()
      uses: octokit/request-action@v2
      with:
        route: POST /repos/:owner/:repo/deployments/:deployment_id/statuses
        owner: ${{ github.repository_owner }}
        repo: ${{ github.event.repository.name }}
        deployment_id: ${{ steps.create_deployment.outputs.id }}
        state: success

    # Update deployment status to failure
    - name: Update deployment status to failure
      if: failure()
      uses: octokit/request-action@v2
      with:
        route: POST /repos/:owner/:repo/deployments/:deployment_id/statuses
        owner: ${{ github.repository_owner }}
        repo: ${{ github.event.repository.name }}
        deployment_id: ${{ steps.create_deployment.outputs.id }}
        state: failure
