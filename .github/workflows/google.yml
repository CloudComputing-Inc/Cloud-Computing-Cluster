name: GKE Deploy
on:
  push:
    branches:
      - main
jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout repository
      uses: actions/checkout@v2
    - name: Set up Cloud SDK
      uses: google-github-actions/setup-gcloud@v1
      with:
        version: 'latest'
    - name: Authenticate to GCP
      uses: google-github-actions/auth@v1
      with:
        credentials_json: ${{ secrets.GCP_SA_KEY }}
    - name: Enable GCP Services
      run: gcloud services enable container
    - name: Install gke-gcloud-auth-plugin
      run: |
        sudo apt-get update
        sudo apt-get install apt-transport-https ca-certificates gnupg curl
        curl https://packages.cloud.google.com/apt/doc/apt-key.gpg | sudo gpg --dearmor -o /usr/share/keyrings/cloud.google.gpg
        echo "deb [signed-by=/usr/share/keyrings/cloud.google.gpg] https://packages.cloud.google.com/apt cloud-sdk main" | sudo tee -a /etc/apt/sources.list.d/google-cloud-sdk.list
        sudo apt-get update && sudo apt-get install google-cloud-cli
        sudo apt-get install -y google-cloud-sdk-gke-gcloud-auth-plugin google-cloud-cli-gke-gcloud-auth-plugin
    - name: Check if GKE Cluster Exists
      id: check-cluster
      run: |
        if gcloud container clusters describe cluster-amazon-data --zone europe-west4-a; then
          echo "exists=true" >> $GITHUB_ENV
        else
          echo "exists=false" >> $GITHUB_ENV
        fi
    - name: Create GKE Cluster
      if: env.exists == 'false'
      run: |
        gcloud container clusters create cluster-amazon-data \
          --zone=europe-west4-a \
          --cluster-version=latest \
          --num-nodes=3 \
          --machine-type=e2-medium \
          --enable-autorepair \
          --scopes=service-control,service-management,compute-rw,storage-ro,cloud-platform,logging-write,monitoring-write
        gcloud container clusters get-credentials cluster-amazon-data --zone europe-west4-a
    - name: Get User Account
      id: get-user
      run: |
        USER_ACCOUNT=$(gcloud config get-value core/account)
        if [ "$USER_ACCOUNT" = "***" ]; then
        if [ -z "$USER_ACCOUNT" ]; then
          SERVICE_ACCOUNT_EMAIL=${{ secrets.GCP_SA_EMAIL }}
          USER_ACCOUNT="$SERVICE_ACCOUNT_EMAIL"
        fi
        echo "USER_ACCOUNT=$USER_ACCOUNT" >> $GITHUB_ENV
        echo "Current authenticated account: $USER_ACCOUNT"
    - name: Debug User Account
      run: echo "User account is $USER_ACCOUNT"

    - name: Create ClusterRoleBinding
      run: |
        kubectl create clusterrolebinding cluster-admin-binding --clusterrole=cluster-admin --user=${{ secrets.GCP_SA_EMAIL }}
    - name: Get Credentials for Existing Cluster
      if: env.exists == 'true'
      run: gcloud container clusters get-credentials cluster-amazon-data --zone europe-west4-a
    - name: Build and Push Docker Images
      run: |
        export PROJECT_ID=$(gcloud info --format='value(config.project)')
        chmod +x ./scripts/proto_requirements.sh
        ./scripts/proto_requirements.sh
        chmod +x ./scripts/proto_create.sh
        ./scripts/proto_create.sh
        cd api/
        docker build -t gcr.io/${PROJECT_ID}/api-gateway .
        cd ../app/microservices/market-performance
        docker build -t gcr.io/${PROJECT_ID}/market-performance .
        docker images
        gcloud services enable containerregistry.googleapis.com
        gcloud auth configure-docker
        docker push gcr.io/${PROJECT_ID}/api-gateway
        docker push gcr.io/${PROJECT_ID}/market-performance
    - name: Configure Firewall and Apply Kubernetes Configs
      run: |
        CLUSTER_NAME=$(gcloud container clusters list --format="value(name)" --filter="zone:(europe-west4-a)")
        TAG_NAME=$(gcloud compute instances list --filter="name~'^gke-$CLUSTER_NAME'" --format="value(tags.items[0])" --limit=1)
        NETWORK_NAME=$(gcloud container clusters describe $CLUSTER_NAME --zone europe-west4-a --format="value(network)")
        FIREWALL_RULE_NAME="allow-nodeport-access"
        if ! gcloud compute firewall-rules describe $FIREWALL_RULE_NAME &>/dev/null; then
          gcloud compute firewall-rules create $FIREWALL_RULE_NAME \
            --direction=INGRESS \
            --priority=1000 \
            --network=$NETWORK_NAME \
            --action=ALLOW \
            --rules=tcp:30000 \
            --source-ranges=0.0.0.0/0 \
            --target-tags=$TAG_NAME
        fi
        for file in kubernetes/*/*.yaml; do kubectl apply -f "$file"; done
        PROMETHEUS_DIR=./prometheus
        kubectl apply -f $PROMETHEUS_DIR/prometheus-config.yaml
        kubectl apply -f $PROMETHEUS_DIR/prometheus-deployment.yaml
        kubectl apply -f $PROMETHEUS_DIR/prometheus-service.yaml
        kubectl apply -f $PROMETHEUS_DIR/pushgateway.yaml
        kubectl apply -f $PROMETHEUS_DIR/grafana.yaml
        kubectl apply -f https://github.com/kubernetes-sigs/metrics-server/releases/latest/download/components.yaml
        kubectl rollout status deployment/prometheus-deployment
        kubectl rollout status deployment/pushgateway
        kubectl create configmap locust-scripts --from-file=kubernetes/locust/locust_marketAnalysis.py || kubectl create configmap locust-scripts --from-file=kubernetes/locust/locust_marketAnalysis.py --dry-run=client -o yaml | kubectl apply -f -
        kubectl get configmap locust-scripts
        EXTERNAL_IP=""
        while [ -z "$EXTERNAL_IP" ]; do
          echo "Waiting for external IP of nginx-gateway-svc..."
          EXTERNAL_IP=$(kubectl get svc nginx-gateway-svc -o jsonpath='{.status.loadBalancer.ingress[0].ip}')
          [ -z "$EXTERNAL_IP" ] && sleep 10
        done
        echo "External IP found: $EXTERNAL_IP"
        LOCUST_DEPLOYMENT_YAML=kubernetes/locust/locust-deployment.yaml
        sed -i "s|--host=http://PLACEHOLDER|--host=http://$EXTERNAL_IP|g" $LOCUST_DEPLOYMENT_YAML
        kubectl apply -f $LOCUST_DEPLOYMENT_YAML