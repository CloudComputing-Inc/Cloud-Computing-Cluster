# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import market_performance_pb2 as market__performance__pb2


class MarketPerformanceServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.GetProductMetadata = channel.unary_unary(
                '/MarketPerformanceService/GetProductMetadata',
                request_serializer=market__performance__pb2.GetProductMetadataRequest.SerializeToString,
                response_deserializer=market__performance__pb2.GetProductMetadataResponse.FromString,
                )
        self.GetMainCategories = channel.unary_unary(
                '/MarketPerformanceService/GetMainCategories',
                request_serializer=market__performance__pb2.GetMainCategoriesRequest.SerializeToString,
                response_deserializer=market__performance__pb2.GetMainCategoriesResponse.FromString,
                )
        self.GetTopProducts = channel.unary_unary(
                '/MarketPerformanceService/GetTopProducts',
                request_serializer=market__performance__pb2.GetTopProductsRequest.SerializeToString,
                response_deserializer=market__performance__pb2.GetTopProductsResponse.FromString,
                )
        self.GetTopBrand = channel.unary_unary(
                '/MarketPerformanceService/GetTopBrand',
                request_serializer=market__performance__pb2.GetTopBrandRequest.SerializeToString,
                response_deserializer=market__performance__pb2.GetTopBrandResponse.FromString,
                )


class MarketPerformanceServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def GetProductMetadata(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetMainCategories(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetTopProducts(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetTopBrand(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_MarketPerformanceServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'GetProductMetadata': grpc.unary_unary_rpc_method_handler(
                    servicer.GetProductMetadata,
                    request_deserializer=market__performance__pb2.GetProductMetadataRequest.FromString,
                    response_serializer=market__performance__pb2.GetProductMetadataResponse.SerializeToString,
            ),
            'GetMainCategories': grpc.unary_unary_rpc_method_handler(
                    servicer.GetMainCategories,
                    request_deserializer=market__performance__pb2.GetMainCategoriesRequest.FromString,
                    response_serializer=market__performance__pb2.GetMainCategoriesResponse.SerializeToString,
            ),
            'GetTopProducts': grpc.unary_unary_rpc_method_handler(
                    servicer.GetTopProducts,
                    request_deserializer=market__performance__pb2.GetTopProductsRequest.FromString,
                    response_serializer=market__performance__pb2.GetTopProductsResponse.SerializeToString,
            ),
            'GetTopBrand': grpc.unary_unary_rpc_method_handler(
                    servicer.GetTopBrand,
                    request_deserializer=market__performance__pb2.GetTopBrandRequest.FromString,
                    response_serializer=market__performance__pb2.GetTopBrandResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'MarketPerformanceService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class MarketPerformanceService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def GetProductMetadata(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/MarketPerformanceService/GetProductMetadata',
            market__performance__pb2.GetProductMetadataRequest.SerializeToString,
            market__performance__pb2.GetProductMetadataResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetMainCategories(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/MarketPerformanceService/GetMainCategories',
            market__performance__pb2.GetMainCategoriesRequest.SerializeToString,
            market__performance__pb2.GetMainCategoriesResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetTopProducts(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/MarketPerformanceService/GetTopProducts',
            market__performance__pb2.GetTopProductsRequest.SerializeToString,
            market__performance__pb2.GetTopProductsResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetTopBrand(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/MarketPerformanceService/GetTopBrand',
            market__performance__pb2.GetTopBrandRequest.SerializeToString,
            market__performance__pb2.GetTopBrandResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
