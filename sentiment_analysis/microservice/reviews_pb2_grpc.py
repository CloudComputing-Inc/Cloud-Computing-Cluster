# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import reviews_pb2 as reviews__pb2


class ReviewServiceStub(object):
    """Define the gRPC service for reviews
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.CreateReview = channel.unary_unary(
                '/ReviewService/CreateReview',
                request_serializer=reviews__pb2.CreateReviewRequest.SerializeToString,
                response_deserializer=reviews__pb2.CreateReviewResponse.FromString,
                )
        self.ReadReview = channel.unary_unary(
                '/ReviewService/ReadReview',
                request_serializer=reviews__pb2.ReadReviewRequest.SerializeToString,
                response_deserializer=reviews__pb2.ReadReviewResponse.FromString,
                )
        self.UpdateReview = channel.unary_unary(
                '/ReviewService/UpdateReview',
                request_serializer=reviews__pb2.UpdateReviewRequest.SerializeToString,
                response_deserializer=reviews__pb2.UpdateReviewResponse.FromString,
                )
        self.DeleteReview = channel.unary_unary(
                '/ReviewService/DeleteReview',
                request_serializer=reviews__pb2.DeleteReviewRequest.SerializeToString,
                response_deserializer=reviews__pb2.DeleteReviewResponse.FromString,
                )


class ReviewServiceServicer(object):
    """Define the gRPC service for reviews
    """

    def CreateReview(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ReadReview(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UpdateReview(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DeleteReview(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_ReviewServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'CreateReview': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateReview,
                    request_deserializer=reviews__pb2.CreateReviewRequest.FromString,
                    response_serializer=reviews__pb2.CreateReviewResponse.SerializeToString,
            ),
            'ReadReview': grpc.unary_unary_rpc_method_handler(
                    servicer.ReadReview,
                    request_deserializer=reviews__pb2.ReadReviewRequest.FromString,
                    response_serializer=reviews__pb2.ReadReviewResponse.SerializeToString,
            ),
            'UpdateReview': grpc.unary_unary_rpc_method_handler(
                    servicer.UpdateReview,
                    request_deserializer=reviews__pb2.UpdateReviewRequest.FromString,
                    response_serializer=reviews__pb2.UpdateReviewResponse.SerializeToString,
            ),
            'DeleteReview': grpc.unary_unary_rpc_method_handler(
                    servicer.DeleteReview,
                    request_deserializer=reviews__pb2.DeleteReviewRequest.FromString,
                    response_serializer=reviews__pb2.DeleteReviewResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'ReviewService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class ReviewService(object):
    """Define the gRPC service for reviews
    """

    @staticmethod
    def CreateReview(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ReviewService/CreateReview',
            reviews__pb2.CreateReviewRequest.SerializeToString,
            reviews__pb2.CreateReviewResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ReadReview(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ReviewService/ReadReview',
            reviews__pb2.ReadReviewRequest.SerializeToString,
            reviews__pb2.ReadReviewResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def UpdateReview(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ReviewService/UpdateReview',
            reviews__pb2.UpdateReviewRequest.SerializeToString,
            reviews__pb2.UpdateReviewResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def DeleteReview(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ReviewService/DeleteReview',
            reviews__pb2.DeleteReviewRequest.SerializeToString,
            reviews__pb2.DeleteReviewResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
